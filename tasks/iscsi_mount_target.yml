---

- import_tasks:
    file: task_header.yml
  vars:
    kol_utils_name: "iscsi mount target"
    kol_utils_params:
      iscsi_target_iqn:      "{{ iscsi_target_iqn | mandatory | replace('{{ inventory_hostname }}',inventory_hostname) }}"
      iscsi_target_ip:       "{{ iscsi_target_ip | mandatory }}"
      iscsi_target_username: "{{ iscsi_target_username | default('') | replace('{{ inventory_hostname }}',inventory_hostname) | regex_replace('[^a-zA-Z0-9]','') }}"
      iscsi_target_password: "{{ iscsi_target_password | default('') }}"
      iscsi_target_port:     "{{ iscsi_target_port | default(3260) | int }}"
      iscsi_target_startup:  "{{ iscsi_target_startup | default('dontchange') }}"
      iscsi_initiatorname:   "{{ iscsi_initiatorname | default(None) }}"
    
########################################

- name: "Process local vars"
  set_fact:
    iscsi_target_config: "/etc/iscsi/nodes/{{ _params['iscsi_target_iqn'] }}/{{ _params['iscsi_target_ip'] }},{{ _params['iscsi_target_port'] }},1/default"

- name: "find existing iscsi device"
  register: _lsscsi_result
  shell:
    cmd: "lsscsi -t | grep '{{ _params['iscsi_target_iqn'] }},' | awk '{ print $4; }'"
  changed_when: False

- name: "store existing iscsi device"
  set_fact:
    iscsi_device: "{{ _lsscsi_result.stdout }}"

- block:
  - include_tasks:
      file: iscsi_install_client_tools.yml
    vars:
      iscsi_initiatorname: "{{ (_params['iscsi_initiatorname'] != None) | ternary(_params['iscsi_initiatorname'], omit) }}"

  - name: "run iscsi discovery"
    register: iscsi_discovery_result
    become: yes
    notify: "Reboot"
    open_iscsi:
      discover:  yes
      portal:    "{{ _params['iscsi_target_ip'] }}"
      port:      "{{ _params['iscsi_target_port'] }}"
      node_user: "{{ (_params['iscsi_target_username'] != '') | ternary(_params['iscsi_target_username'], omit) }}"
      node_pass: "{{ (_params['iscsi_target_password'] != '') | ternary(_params['iscsi_target_password'], omit) }}"

  - name: "update iscsi target startup"
    become: yes
    notify: "Reboot"
    lineinfile:
      path: "{{ iscsi_target_config }}"
      regexp: "^(node.startup[ ]*=[ ]*).*"
      line: "\\1{{ _params['iscsi_target_startup'] }}"
      backrefs: yes
    when: _params['iscsi_target_startup'] != 'dontchange'

  - name: "update iscsi target connection startup"
    become: yes
    notify: "Reboot"
    lineinfile:
      path: "{{ iscsi_target_config }}"
      regexp: "^(node.conn\\[0\\].startup[ ]*=[ ]*).*"
      line: "\\1{{ _params['iscsi_target_startup'] }}"
      backrefs: yes
    when: _params['iscsi_target_startup'] != 'dontchange'

  - name: "set iscsi target CHAP authmethod"
    become: yes
    notify: "Reboot"
    lineinfile:
      path: "{{ iscsi_target_config }}"
      regexp: "^(node.session.auth.authmethod[ ]*=[ ]*).*"
      line: "\\1CHAP"
      backrefs: yes
    when: _params['iscsi_target_username'] != '' or _params['iscsi_target_password'] != ''

  - block:
    - name: "insert iscsi target CHAP password if missing"
      become: yes
      notify: "Reboot"
      lineinfile:
        path: "{{ iscsi_target_config }}"
        regexp: "^(node.session.auth.password[ ]*=[ ]*).*"
        insertafter: "^node.session.auth.authmethod"
        line: "node.session.auth.password = {{ _params['iscsi_target_password'] }}"

    - name: "update iscsi target CHAP password"
      become: yes
      notify: "Reboot"
      lineinfile:
        path: "{{ iscsi_target_config }}"
        regexp: "^(node.session.auth.password[ ]*=[ ]*).*"
        line: "\\1{{ _params['iscsi_target_password'] }}"
        backrefs: yes
    when: _params['iscsi_target_password'] != ''

  - block:
    - name: "insert iscsi target CHAP username if missing"
      become: yes
      notify: "Reboot"
      lineinfile:
        path: "{{ iscsi_target_config }}"
        regexp: "^(node.session.auth.username[ ]*=[ ]*).*"
        insertafter: "^node.session.auth.authmethod"
        line: "node.session.auth.username = {{ _params['iscsi_target_username'] }}"

    - name: "update iscsi target CHAP user"
      become: yes
      notify: "Reboot"
      lineinfile:
        path: "{{ iscsi_target_config }}"
        regexp: "^(node.session.auth.username[ ]*=[ ]*).*"
        line: "\\1{{ _params['iscsi_target_username'] }}"
        backrefs: yes
    when: _params['iscsi_target_username'] != ''

  - name: "connect iscsi lun"
    register: iscsi_mount_result
    become: yes
    notify: "Reboot"
    open_iscsi:
      auto_node_startup: "{{ 'yes' if (_params['iscsi_target_startup'] == 'automatic') else 'no' if (_params['iscsi_target_startup'] == 'manual') else omit }}"
      login: yes
      portal: "{{ _params['iscsi_target_ip'] }}"
      port: "{{ _params['iscsi_target_port'] }}"
      target: "{{ _params['iscsi_target_iqn'] }}"
      node_user: "{{ _params['iscsi_target_username'] }}"
      node_pass: "{{ _params['iscsi_target_password'] }}"

  - name: "find iscsi device"
    set_fact:
      iscsi_device: "{{ iscsi_mount_result.devicenodes[0] }}"

  when: iscsi_device | default('') == ''

- name: "find iscsi root file system uuid (include)"
  include_tasks:
    file: filesystem_find_uuid.yml
  vars:
    target_device: "{{ iscsi_device }}"

- name: "set iscsi lun filesystem uuid"
  set_fact:
    iscsi_uuid: "{{ device_uuid }}"

########################################

- import_tasks:
    file: task_footer.yml
  vars:
    kol_utils_exit_vars:
      [
        "iscsi_uuid:             {{ iscsi_uuid }}",
        "iscsi_device:           {{ iscsi_device }}",
        "iscsi_discovery_result: {{ iscsi_discovery_result }}",
        "iscsi_mount_result:     {{ iscsi_mount_result }}",
        "iscsi_target_config:    {{ iscsi_target_config }}"
      ]
